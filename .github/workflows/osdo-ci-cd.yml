name: OSDO CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar an√°lisis de seguridad semanalmente
    - cron: '0 2 * * 1'

concurrency:
  group: 'osdo-compliance-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  test-and-quality:
    name: üß™ Testing & Quality Assurance
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

    #   - name: Restore npm cache
    #     uses: actions/cache@v3
    #     with:
    #       path: ~/.npm
    #       key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
    #       restore-keys: |
    #         ${{ runner.os }}-npm-

      - name: Install dependencies
        run: |
            # Limpiar cach√© si es necesario
            npm cache verify
            # Instalar dependencias
            npm ci --prefer-offline --no-audit

      - name: Install OSDO testing tools
        run: |
          # Instalar dependencias de seguridad y testing
          npm install --save-dev eslint-plugin-security @microsoft/eslint-formatter-sarif license-checker
          npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event
          npm install --save-dev @vitest/ui @vitest/coverage-v8 vitest jsdom @testing-library/dom

      - name: Setup testing environment
        run: |
          chmod +x .osdo/tools/test-runner.sh
          ./.osdo/tools/test-runner.sh
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .osdo/results/unit-tests.json
            .osdo/results/integration-tests.json
            .osdo/results/coverage-summary.json
            .osdo/results/test-report.html
            .osdo/results/coverage/

  dependency-security-scan:
    name: üîç Dependency Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    needs: test-and-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create results directory
        run: mkdir -p .osdo/results

      - name: Snyk Vulnerability Analysis
        run: |
          docker run --rm \
            -v "$(pwd):/project" \
            -v "$(pwd)/.osdo/results:/results" \
            snyk/snyk:node \
            test /project \
            --json > .osdo/results/snyk.json 2>/dev/null || true

      - name: Snyk License Analysis (high severity)
        run: |
          docker run --rm \
            -v "$(pwd):/project" \
            -v "$(pwd)/.osdo/results:/results" \
            snyk/snyk:node \
            test /project \
            --json \
            --severity-threshold=high > .osdo/results/snyk-licenses.json 2>/dev/null || true

      - name: Upload Snyk reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-reports
          path: |
            .osdo/results/snyk.json
            .osdo/results/snyk-licenses.json

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          npm audit --json > .osdo/results/npm-audit-report.json
        continue-on-error: true

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: .osdo/results/npm-audit-report.json

      - name: Run Retire.js
        run: |
          npx retire --outputformat json --outputpath .osdo/results/retire-report.json
          npx retire --outputformat html --outputpath .osdo/results/retire-report.html
        continue-on-error: true
      - name: Upload Retire.js report
        uses: actions/upload-artifact@v4
        with:
          name: retirejs-report
          path: |
            retire-report.json
            retire-report.html
      - name: Download OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
          unzip dependency-check-9.2.0-release.zip -d dependency-check
      - name: Run OWASP Dependency-Check
        run: |
          ./dependency-check/bin/dependency-check.sh --project "xopsmainpage-react" \
            --scan . \
            --format JSON \
            --out .osdo/results/dependency-check-report.json \
            --failOnCVSS 7 || true
      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: .osdo/results/dependency-check-report.json
      - name: CycloneDX SBOM Generation
        uses: CycloneDX/gh-node-module-generatebom@v1.0.3
        with:
          path: .osdo/results
          output: sbom.json
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            .osdo/results/sbom.json
      # An√°lisis de licencias
      - name: License compliance check
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0' --excludePrivatePackages
        continue-on-error: true

  static-analysis:
    name: üõ°Ô∏è Static Application Security Testing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    needs: dependency-security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
      
      - name: Create results directory
        run: mkdir -p .osdo/results

      - name: Semgrep Static Analysis
        run: |
          RESULTS_DIR="$(pwd)/.osdo/results"
          docker run --rm \
            -v "$(pwd):/src" \
            -v "$RESULTS_DIR:/results" \
            returntocorp/semgrep:latest \
            semgrep --output /results/semgrep.sarif /src || true
        continue-on-error: true
      
      - name: Upload Semgrep SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .osdo/results/semgrep.sarif
        if: always()
        continue-on-error: true
      - name: Install ESLint Security Plugin
        run: npm install eslint @microsoft/eslint-formatter-sarif eslint-plugin-security eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh --save-dev
        
      - name: Run ESLint with Security Rules
        env:
            SARIF_ESLINT_IGNORE_SUPPRESSED: "true"
        run: |
          # Crear directorio para resultados si no existe
          mkdir -p .osdo/results
          
          # Ejecutar ESLint con formato JSON (usando configuraci√≥n por defecto)
          npx eslint . --format json -o .osdo/results/eslint-security-report.json || true
          
          # Ejecutar ESLint con formato SARIF (usando configuraci√≥n por defecto)
          npx eslint . --format @microsoft/eslint-formatter-sarif --output-file .osdo/results/eslint-results.sarif || true
          
          # Verificar que los archivos se generaron
          echo "Verificando archivos generados:"
          ls -la .osdo/results/
          
          # Mostrar contenido del archivo SARIF para depuraci√≥n
          if [ -f .osdo/results/eslint-results.sarif ]; then
            echo "‚úÖ Archivo SARIF generado exitosamente"
            echo "Tama√±o del archivo: $(wc -c < .osdo/results/eslint-results.sarif) bytes"
            echo "Validando formato SARIF:"
            head -5 .osdo/results/eslint-results.sarif | grep -q "version.*2.1.0" && echo "‚úÖ Formato SARIF v√°lido" || echo "‚ùå Formato SARIF inv√°lido"
          else
            echo "‚ùå Archivo SARIF no se gener√≥"
            echo "Contenido del directorio .osdo/results/:"
            ls -la .osdo/results/ || echo "Directorio no existe"
          fi
          
          # Verificar archivo JSON tambi√©n
          if [ -f .osdo/results/eslint-security-report.json ]; then
            echo "‚úÖ Archivo JSON generado exitosamente"
            echo "Tama√±o del archivo: $(wc -c < .osdo/results/eslint-security-report.json) bytes"
          else
            echo "‚ùå Archivo JSON no se gener√≥"
          fi
        continue-on-error: true

      - name: Upload ESLint reports
        uses: actions/upload-artifact@v4
        with:
          name: eslint-reports
          path: |
            .osdo/results/eslint-security-report.json
        if: always()
        
      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: .osdo/results/eslint-results.sarif
          wait-for-processing: true
        if: always()
        continue-on-error: true

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 4: An√°lisis de Secretos y Seguridad Avanzada
  secrets-scan:
    name: üîê Secrets Detection & Advanced Security
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Execute GitLeaks Secrets Analysis
        run: |
          mkdir -p .osdo/results
          docker run --rm \
            -v $(pwd):/workspace \
            -v $(pwd)/.osdo/results:/results \
            zricethezav/gitleaks:latest \
            detect \
            --source="/workspace" \
            --report-format=json \
            --report-path="/results/gitleaks-secrets.json" \
            --verbose || true
        continue-on-error: true

    #   - name: Execute Semgrep Secrets Analysis
    #     run: |
    #       docker run --rm \
    #         -v $(pwd):/workspace \
    #         -v $(pwd)/.osdo/results:/results \
    #         returntocorp/semgrep:latest \
    #         --config=auto \
    #         --json \
    #         --output="/results/semgrep-secrets.json" \
    #         /workspace || true
    #     continue-on-error: true

      - name: Evaluate Secrets Analysis Results
        run: |
          mkdir -p .osdo/results
          
          # Contar detecciones de GitLeaks
          gitleaks_count=$(cat .osdo/results/gitleaks-secrets.json 2>/dev/null | jq 'length' 2>/dev/null || echo "0")
          
          # Contar detecciones de Semgrep (solo secretos)
          semgrep_count=$(cat .osdo/results/semgrep-secrets.json 2>/dev/null | jq '[.results[] | select(.extra.metadata.category == "security" and (.extra.metadata.subcategory // "" | contains("secret")))] | length' 2>/dev/null || echo "0")
          
          # Crear reporte de secretos
          cat > .osdo/results/secrets-analysis-summary.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "gitleaks_detections": $gitleaks_count,
            "semgrep_detections": $semgrep_count,
            "total_secrets_found": $((gitleaks_count + semgrep_count)),
            "analysis_files": [
              "gitleaks-secrets.json",
              "semgrep-secrets.json"
            ]
          }
          EOF
          
          echo "Secrets Analysis Summary:"
          echo "GitLeaks detections: $gitleaks_count"
          echo "Semgrep detections: $semgrep_count"
          echo "Total secrets found: $((gitleaks_count + semgrep_count))"
          
          # Advertir si se encuentran secretos
          if [ $((gitleaks_count + semgrep_count)) -gt 0 ]; then
            echo "::warning::Secrets detected in codebase. Review .osdo/results/secrets-analysis-summary.json"
          fi
        continue-on-error: true

    #   - name: Run TruffleHog OSS
    #     uses: trufflesecurity/trufflehog@main
    #     with:
    #       path: ./
    #       base: main
    #       head: HEAD
    #       extra_args: --debug --only-verified
    #     continue-on-error: true

      - name: Upload secrets analysis results
        uses: actions/upload-artifact@v4
        with:
          name: secrets-analysis-results
          path: |
            .osdo/results/gitleaks-secrets.json
            .osdo/results/semgrep-secrets.json
            .osdo/results/secrets-analysis-summary.json

  # Job 5: Build Security & SBOM
  build-security:
    name: üèóÔ∏è Secure Build & SBOM Generation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
      security-events: write
    needs: [test-and-quality, dependency-security-scan, static-analysis, secrets-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate SBOM (Software Bill of Materials)
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file sbom.json
          npx @cyclonedx/cyclonedx-npm --output-format xml --output-file sbom.xml

      - name: Build application
        run: npm run build

      - name: Verify build integrity
        run: |
          echo "Verificando integridad del build..."
          find dist -type f -name "*.js" -o -name "*.css" -o -name "*.html" | wc -l
          du -sh dist/

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom.json
            sbom.xml

  # Job 6: Compliance Report
  compliance-report:
    name: üìä OSDO Compliance Report
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    needs: [test-and-quality, dependency-security-scan, static-analysis, secrets-scan, build-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Compliance Report
        run: |
          echo "# OSDO Compliance Report" > compliance-report.md
          echo "## Fecha: $(date)" >> compliance-report.md
          echo "## Commit: ${{ github.sha }}" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "### ‚úÖ Controles Implementados:" >> compliance-report.md
          echo "- [x] Tests unitarios y de integraci√≥n" >> compliance-report.md
          echo "- [x] An√°lisis de cobertura de c√≥digo" >> compliance-report.md
          echo "- [x] An√°lisis de dependencias y vulnerabilidades (SCA)" >> compliance-report.md
          echo "- [x] An√°lisis est√°tico de c√≥digo (SAST)" >> compliance-report.md
          echo "- [x] Detecci√≥n de secretos (GitLeaks, Semgrep, TruffleHog)" >> compliance-report.md
          echo "- [x] Generaci√≥n de SBOM" >> compliance-report.md
          echo "- [x] Build seguro" >> compliance-report.md
          echo "" >> compliance-report.md
          
          echo "### üìã Resultados del An√°lisis:" >> compliance-report.md
          echo "#### Testing:" >> compliance-report.md
          if [ -d test-results ]; then
            echo "- Tests unitarios: Ejecutados" >> compliance-report.md
            echo "- Tests de integraci√≥n: Ejecutados" >> compliance-report.md
            echo "- Cobertura de c√≥digo: Generada" >> compliance-report.md
          fi
          
          echo "" >> compliance-report.md
          echo "#### Dependencias:" >> compliance-report.md
          if [ -f npm-audit-report/npm-audit-report.json ]; then
            VULNERABILITIES=$(jq '.metadata.vulnerabilities | to_entries | map(select(.value > 0)) | length' npm-audit-report/npm-audit-report.json 2>/dev/null || echo "0")
            echo "- Vulnerabilidades encontradas: $VULNERABILITIES" >> compliance-report.md
          fi
          
          echo "" >> compliance-report.md
          echo "#### An√°lisis Est√°tico:" >> compliance-report.md
          if [ -d eslint-reports ]; then
            echo "- ESLint: An√°lisis completado" >> compliance-report.md
          fi
          
          echo "" >> compliance-report.md
          echo "#### Secretos:" >> compliance-report.md
          if [ -f secrets-analysis-results/secrets-analysis-summary.json ]; then
            SECRETS_COUNT=$(jq '.total_secrets_found' secrets-analysis-results/secrets-analysis-summary.json 2>/dev/null || echo "0")
            echo "- Total de secretos encontrados: $SECRETS_COUNT" >> compliance-report.md
          fi
          echo "- TruffleHog: An√°lisis completado" >> compliance-report.md
          echo "- GitLeaks: An√°lisis completado" >> compliance-report.md
          echo "- Semgrep: An√°lisis completado" >> compliance-report.md
          
          echo "" >> compliance-report.md
          echo "### üì¶ Artefactos Generados:" >> compliance-report.md
          echo "- Reportes de testing y cobertura" >> compliance-report.md
          echo "- SBOM (Software Bill of Materials)" >> compliance-report.md
          echo "- Reportes de vulnerabilidades" >> compliance-report.md
          echo "- Reportes de an√°lisis est√°tico" >> compliance-report.md
          echo "- Reportes de an√°lisis de secretos" >> compliance-report.md

      - name: Upload Compliance Report
        uses: actions/upload-artifact@v4
        with:
          name: osdo-compliance-report
          path: compliance-report.md

      - name: Comment PR with Compliance Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üõ°Ô∏è OSDO Compliance Check\n\n${report}`
            });

  # Job 7: Security Quality Gate
  security-quality-gate:
    name: üö¶ Security Quality Gate
    runs-on: ubuntu-latest
    needs: [test-and-quality, dependency-security-scan, static-analysis, secrets-scan]
    permissions:
      contents: read
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Evaluate Security Quality Gate
        run: |
          echo "Evaluando Security Quality Gate..."
          
          # Verificar vulnerabilidades cr√≠ticas
          CRITICAL_VULNS=0
          if [ -f npm-audit-report/npm-audit-report.json ]; then
            CRITICAL_VULNS=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-report/npm-audit-report.json)
          fi
          
          # Verificar secretos encontrados
          SECRETS_FOUND=0
          if [ -f secrets-analysis-results/secrets-analysis-summary.json ]; then
            SECRETS_FOUND=$(jq '.total_secrets_found' secrets-analysis-results/secrets-analysis-summary.json 2>/dev/null || echo "0")
          fi
          
          echo "Vulnerabilidades cr√≠ticas: $CRITICAL_VULNS"
          echo "Secretos encontrados: $SECRETS_FOUND"
          
          # Evaluar quality gate
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå QUALITY GATE FAILED: Se encontraron vulnerabilidades cr√≠ticas"
            exit 1
          fi
          
          if [ "$SECRETS_FOUND" -gt 0 ]; then
            echo "‚ö†Ô∏è QUALITY GATE WARNING: Se encontraron secretos potenciales"
            # No fallar por secretos, solo advertir
          fi
          
          echo "‚úÖ QUALITY GATE PASSED: No se encontraron vulnerabilidades cr√≠ticas"

      - name: Security Gate Status
        run: echo "üéâ Aplicaci√≥n aprobada por el Security Quality Gate"
